# This code was automatically generated using 
# jinja template! To change anything, don't change
# this file! Use the template!

from flask import  request, flash, redirect, url_for, make_response, render_template, Blueprint
from flask_login import login_user, current_user, logout_user, login_required
from flask_babel import gettext
from qlerner.main.database import db
from sqlalchemy import text
from qlerner.main.routes import admin_required
from qlerner.models.{{ entity_name|lower }} import {{ entity_name }}
{% if entity_name == 'Lesson' %}from qlerner.main.exercise_routes import search_exercises{% endif %}
from qlerner.models.tags import Tags, {{ entity_name|lower}}_tags

{{ entity_name|lower}}_routes = Blueprint('{{ entity_name|lower}}_routes', __name__)

def search_{{ entity_name|lower }}s(search = '', sort_by = 'id', sort_order = 'asc'):
    sql = f"""
    SELECT e.*, GROUP_CONCAT(t.tag) as tags
    FROM {{ entity_name|lower }}s e
    LEFT JOIN {{ entity_name|lower }}_tags et ON e.id = et.{{ entity_name|lower }}_id
    LEFT JOIN tags t ON t.id = et.tag_id
    WHERE {% for column in columns %}lower(e.{{ column }}) LIKE '%{search}%' OR {% endfor %}lower(t.tag) LIKE '%{search}%'
    GROUP BY e.id
    ORDER BY {sort_by} {sort_order}
    """ if search != '' else f"""SELECT e.*, GROUP_CONCAT(t.tag) as tags
    FROM {{ entity_name|lower }}s e
    LEFT JOIN {{ entity_name|lower }}_tags et ON e.id = et.{{ entity_name|lower }}_id
    LEFT JOIN tags t ON t.id = et.tag_id
    GROUP BY e.id
    ORDER BY {sort_by} {sort_order}"""

    {{ entity_name|lower }}s = db.session.execute(text(sql)).fetchall()
    return {{ entity_name|lower }}s

# Page with all {{ entity_name|lower }}s, with links to edit, 
# copy or delete them and a button to add a new one.
@{{ entity_name|lower}}_routes.route('/{{ entity_name|lower }}s', methods=['GET'])
@login_required
@admin_required
def {{ entity_name|lower }}s():
    search = request.args.get('search', '')
    sort_by = request.args.get('sort_by', 'id')
    sort_order = request.args.get('sort_order', 'asc')

    {{ entity_name|lower }}s = search_{{ entity_name|lower }}s(search=search, sort_by=sort_by, sort_order=sort_order)
    return render_template('entity_template.html', entity_name='{{ entity_name }}', columns={{ columns }},
    entities={{ entity_name|lower }}s, search=search, sort_by=sort_by, sort_order=sort_order)

# Page to create a new {{ entity_name|lower }}.
@{{ entity_name|lower}}_routes.route('/admin/create_{{ entity_name|lower }}', methods=['GET', 'POST'])
@login_required
@admin_required
def create_{{ entity_name|lower }}():
    search = request.args.get('search', '')
    sort_by = request.args.get('sort_by', 'id')
    sort_order = request.args.get('sort_order', 'asc')
    # handle form submission
    if request.method == 'POST':
        {% for column in columns[1:] %}{% if column in ['exercise_ids']%}
        exercise_ids = ','.join(request.form.getlist('exercises')){% else %}
        {{ column }} = request.form['{{ column }}']{% endif %}{% endfor %}
        tags = request.form['tags']
        {% if entity_name.lower() in ['user']%}
        # validate form data
        if not {{ columns[0] }} or not {{ columns[1] }}:
            flash(gettext('Please enter both a question and an answer'), 
                'danger')
            return redirect(url_for('{{ entity_name|lower }}_routes.create_{{ entity_name|lower }}'))
        {% endif %}
        # create a new {{ entity_name|lower }} and add it to the database
        new_{{ entity_name|lower }} = {{ entity_name }}(
            {% for column in columns[1:] %}{{ column }}={{ column }},{% endfor %}
        )
        db.session.add(new_{{ entity_name|lower }})
        db.session.commit()

        # create tags for the new {{ entity_name|lower }} if any
        tags = request.form['tags']
        if tags:
            tags_list = tags.split(',')
            for tag in tags_list:
                tag_id = Tags.query.filter_by(tag=tag).first()
                if tag_id == None:
                    new_tag = Tags(tag=tag)
                    db.session.add(new_tag)
                    db.session.commit()
                    tag_id = new_tag.id
                db.session.execute({{ entity_name|lower }}_tags.insert().values({{ entity_name|lower }}_id=new_{{ entity_name|lower }}.id, tag_id=tag_id))
            db.session.commit()

        flash(gettext('{{ entity_name }} created successfully'), 'success')
        return redirect(url_for('{{ entity_name|lower }}_routes.create_{{ entity_name|lower }}'))

    # render the {{ entity_name|lower }} creation form
    return render_template('create_template.html', entity_name='{{ entity_name }}',
        columns={{ columns }}{% if entity_name == 'Lesson' %}, exercises = search_exercises(search=search,
         sort_by=sort_by, sort_order=sort_order ){% endif %})

# Page to edit some {{ entity_name|lower }}.
@{{ entity_name|lower}}_routes.route('/{{ entity_name|lower}}/<int:id>/edit', methods=['GET', 'POST'])
@login_required
@admin_required
def edit_{{ entity_name|lower}}(id):
    search = request.args.get('search', '')
    sort_by = request.args.get('sort_by', 'id')
    sort_order = request.args.get('sort_order', 'asc')
    {{ entity_name|lower}}_id = id
    {{ entity_name|lower}} = {{ entity_name }}.query.filter_by(id={{ entity_name|lower}}_id).first_or_404()
    tags = set(db.session.execute(
        {{ entity_name|lower}}_tags.select().filter_by(
            {{ entity_name|lower}}_id={{ entity_name|lower}}_id
            )).fetchall())
    old_tags = set([Tags.query.filter_by(id=tag.tag_id).first_or_404().tag for tag in tags])
    {{ entity_name|lower}}.tags=','.join(old_tags) if len(old_tags) > 0 else ''

    if request.method == 'POST':
        # Update {{ entity_name|lower}} data
        {% for column in columns[1:] %}{% if column in ['exercise_ids']%}
        {{ entity_name|lower }}.exercise_ids = ','.join(request.form.getlist('exercises')){% else %}
        {{ entity_name|lower }}.{{ column }} = request.form['{{ column }}']{% endif %}{% endfor %}
        tags = request.form['tags']
        
        new_tags = set( request.form['tags'].split(',') if request.form['tags'] != '' else [])
        tags_to_add = new_tags - old_tags
        tags_to_delete = old_tags - new_tags

        # Add new tags to the {{ entity_name|lower}}_tags table
        for tag in tags_to_add:
            tag_search = Tags.query.filter_by(tag=tag).first()
            if tag_search == None:
                tag_search = Tags(tag=tag)
                db.session.add(tag_search)
                db.session.commit()
            db.session.execute({{ entity_name|lower}}_tags.insert().values({{ entity_name|lower}}_id={{ entity_name|lower}}_id, tag_id=tag_search.id))
        for tag in tags_to_delete:
            tag_search = Tags.query.filter_by(tag=tag).first_or_404()
            db.session.execute({{ entity_name|lower}}_tags.delete().filter_by({{ entity_name|lower}}_id={{ entity_name|lower}}_id, tag_id=tag_search.id))

        db.session.commit()

        flash(gettext('Exercise updated successfully'), 'success')
        return redirect(url_for('{{ entity_name|lower }}_routes.{{ entity_name|lower}}s'))

    return render_template('edit_template.html', entity_name='{{ entity_name }}', columns={{ columns }},
                        entity={{ entity_name|lower}}{% if entity_name == 'Lesson' %}, exercises = search_exercises(search=search,
                        sort_by=sort_by, sort_order=sort_order ){% endif %})

# URL to delete {{ entity_name|lower }}.
@{{ entity_name|lower}}_routes.route('/{{ entity_name|lower}}/<int:id>/delete', methods=['GET', 'POST'])
@login_required
@admin_required
def delete_{{ entity_name|lower}}(id):
    {{ entity_name|lower}}_id = id
    {{ entity_name }}.query.filter_by(id={{ entity_name|lower}}_id).delete()
    db.session.commit()
    return make_response(redirect(request.referrer))

{% if entity_name not in ['User'] %}
# URL to copy {{ entity_name|lower }}
@{{ entity_name|lower}}_routes.route('/{{ entity_name|lower}}/<int:id>/copy', methods=['GET', 'POST'])
@login_required
@admin_required
def copy_{{ entity_name|lower}}(id):
    {{ entity_name|lower}}_id = id
    new_{{ entity_name|lower}} = {{ entity_name }}.query.filter_by(id={{ entity_name|lower}}_id).first().clone()
    for tag in db.session.execute(
        {{ entity_name|lower}}_tags.select().filter_by(
            {{ entity_name|lower}}_id={{ entity_name|lower}}_id
            )).fetchall():
        db.session.execute({{ entity_name|lower}}_tags.insert().values({{ entity_name|lower}}_id=new_{{ entity_name|lower}}.id, tag_id=tag.tag_id))
    db.session.commit()
    return make_response(redirect(request.referrer))
{% endif %}